{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "@ts-expect-error": {
		"prefix": "@ts-expect-error",
		"body": "@ts-expect-error",
		"description": "@ts-expect-error"
	},
  
  "const { t } = useT();": {
		"prefix": "const { t } = useT();",
		"body": "const { t } = useT();",
		"description": "const { t } = useT();"
	},
  "flex style": {
		"prefix": "flex style",
		"body": "style={{ display: 'flex', flexDirection: 'column', gap: ${1:16} }}",
		"description": "flex style"
	},

  "gap style": {
		"prefix": "gap style",
		"body": "style={{ display: 'flex', gap: ${1:16} }}",
		"description": "gap style"
	},
  
  "style": {
  	"prefix": "style",
  	"body": [
  		"style={{ ${1:width: } }}",
  	],
  	"description": "style"
  },
  "empty fragment": {
  	"prefix": "empty fragment",
  	"body": [
  		"<>$1</>",
  	],
  	"description": "empty fragment"
  },
  "new-component": {
    "prefix": "new-component",
    "body": [
      "import React from 'react';",
      "",
      "interface IProps {",
      "  title: string;",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<IProps> = ({ title }) => {",
      "  return <div>${1:$TM_FILENAME_BASE}</div>;",
      "};",
      ""
    ],
    "description": "new-component"
  },
  "i18n-component": {
    "prefix": "i18n-component",
    "body": [
      "const IntlWrapper: React.FC<IProps> = ({ locale, ...props }) => {",
      "  const intl = useIntl()",
      "  locale = locale ?? (intl.locale as ISupportedLocale)",
      "",
      "  return (",
      "    <IntlProvider",
      "      locale={locale}",
      "      messages={getMessages(locale)}",
      "    >",
      "      <$1 {...props} />",
      "    </IntlProvider>",
      "  )",
      "}",
      "",
      "export default IntlWrapper",
      ""
    ],
    "description": "i18n-component"
  },
  
  "// prettier-ignore": {
    "prefix": "// prettier-ignore",
    "body": "// prettier-ignore",
    "description": "// prettier-ignore"
  },

  "data-aspm": {
		"prefix": "data-aspm",
		"body": "data-aspm=\"$1\"",
		"description": "曝光 C 位"
	},
	"data-aspm-expo": {
		"prefix": "data-aspm-expo",
		"body": "data-aspm-expo",
		"description": "曝光"
	},
	"data-aspm-click": {
		"prefix": "data-aspm-click=\"$1\"",
		"body": "data-aspm-click=\"$1\"",
		"description": "点击"
	},
	"data-aspm-param": {
		"prefix": "data-aspm-param",
		"body": "data-aspm-param=\"$1\"",
		"description": "参数"
	},

  "className": {
  	"prefix": "className",
  	"body": [
  		"className={styles.$1}",
  	],
  	"description": "className"
  },

  "Promise": {
		"prefix": "promise",
		"body": "Promise((resolve, reject) => {$1})"
	},

  "alert ap": {
    "prefix": "alert",
    "body": "ap.alert({ content: JSON.stringify(${1:payload}, null, 2) });",
    "description": "ap.alert for debugging"
	},
	"toast ap": {
    "prefix": "toast",
    "body": "ap.showToast({ content: JSON.stringify(${1:payload}, null, 2) });",
    "description": "ap.showToast for debugging"
  },

  "alert my": {
    "prefix": "alert",
    "body": "my.alert({ content: JSON.stringify(${1:payload}, null, 2) });",
    "description": "my.alert for debugging"
	},
	"toast my": {
    "prefix": "toast",
    "body": "my.showToast({ content: JSON.stringify(${1:payload}, null, 2) });",
    "description": "my.showToast for debugging"
  },
  
  "string interpolation": {
		"prefix": "$ string interpolation",
		"body": [
			"${$1}",
		],
		"description": "string interpolation"
  },
  
  "ts interface": {
    "prefix": "interface",
    "body": [
      "interface $1 {",
      "  ${2:key}: ${3:string};",
      "}",
    ],
    "description": "TS Interface Template"
  },
  
  "useState": {
		"prefix": "useState",
		"body": [
			"const [$1, set${1/(^.)/${1:/upcase}/}] = React.useState(${3:false});",
		],
		"description": "useState"
  },
  
  "log-simple": {
    "prefix": "log-simple",
    "body": ["console.log('$1');"],
    "description": "console.log('$1')"
  },
  "log-verbose": {
    "prefix": "log-verbose console.log('$1:', $1)",
    "body": ["console.log('$1:', $1);"],
    "description": "console.log('$1:', $1)"
  },
  "noopener noreferrer": {
    "prefix": "rel=\"noopener noreferrer\"",
    "body": "rel=\"noopener noreferrer\"",
    "description": "noopener noreferrer"
  }
}
